#+title: ELAIZA
#+LAST_MODIFIED: [2024-04-30 Tue 16:26]
#+HTML: <img src="./assets/logo.webp" width="256px" align="right" alt="A cyberpunk-themed scene with a sleeker, less muscular hacker bunny wearing dark glasses, a stylish futuristic hoodie, and a visible black tank top beneath. The bunny, now with a slimmer, more toned build, exhibits a concentrated look as it types on an old-fashioned computer terminal. A half-eaten orange carrot is next to the keyboard. The scene is vibrantly lit with neon lights, enhancing the cyberpunk ambiance. A speech bubble above the bunny reads 'What's up Doc?' in a bold, cyber font, and the screen displays 'ELAIZA' in green monospaced font."/>


An updated Emacs doctor.

This package provides an llm-agnostic backend with multiple applications. For example, to honor its [[https://en.wikipedia.org/wiki/ELIZA][ancestor]], you can talk to a new AI-enhanced Emacs doctor via =M-x elaiza-doctor=.

For general chatting, you can use =M-x elaiza=. This lets you select an available LLM (see supported backends) and start a chat from the minibuffer.

Similar to OpenAI's GPTs you can create your own assistants. For example, =M-x elaiza-editor= is a multilingual editor, giving you suggestions for your current buffer.

* Installation

** Doom Emacs
Add the following to your =packages.el=
#+begin_src emacs-lisp
(package! elaiza :recipe (:host github :repo "SFTtech/emacs-elaiza" :branch "main"))
#+end_src

** API Keys
To securely store and retrieve API keys, use auth-source, as documented in the [[https://www.gnu.org/software/emacs/manual/html_mono/auth.html][Emacs Auth Manual]]. Add the following to your =auth-sources= file, e.g., =.authinfo.gpg=, to store them:

*** Example: OpenAI
#+begin_example
machine api.openai.com port https login elaiza password <your-api-key>
#+end_example
*** Example: Claude
#+begin_example
machine api.anthropic.com port https login elaiza password <your-api-key>
#+end_example

* Usage
#+HTML: <img src="./assets/elaiza-editor.png" width="800px" alt="Elaiza editor giving suggestions for this README."/>
Currently, two applications are available:
- =M-x elaiza= for direct minibuffer prompts
- =M-x elaiza-doctor= for an AI-enhanced Emacs doctor experience
- =M-x elaiza-editor= as a multilingual editor for suggestions in your current buffer

* Supported Backends

| Model           | Provider  | Sourcecode          |
|-----------------+-----------+---------------------|
| GPT 4           | OpenAI    | =elaiza-openai.el=    |
| GPT 4 Turbo     | OpenAI    | =elaiza-openai.el=    |
| GPT 3.5 Turbo   | OpenAI    | =elaiza-openai.el=    |
| Claude 3 Opus   | Anthropic | =elaiza-claude.el=    |
| Claude 3 Sonnet | Anthropic | =elaiza-claude.el=    |
| Claude 3 Haiku  | Anthropic | =elaiza-claude.el=    |
|                 | [[https://github.com/mozilla-Ocho/llamafile][Llamafile]] | =elaiza-llamafile.el= |

* Alternatives
- [[https://github.com/karthink/gptel][karthink/gptel]] GPTel: A simple LLM client for Emacs
- [[https://github.com/ahyatt/llm][ahyatt/llm]]: llm package for emacs
